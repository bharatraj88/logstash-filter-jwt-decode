:plugin: jwtdecode
:type: filter
// Update header with plugin name

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: %VERSION%
:release_date: %RELEASE_DATE%
:changelog_url: %CHANGELOG_URL%
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}s-{plugin}"]

=== Example filter plugin

include::{include_path}/plugin_header.asciidoc[]

==== Description

This jwtdecode filter plugin allows you to decode JWT token present in your event, extract the varaibles which you need and add it to event

Example:
[source,ruby]
-----
filter {
    jwtdecode {
        match => "token"
        "extract_fields" => {"user_id" => "user.id", "user_name" => "user.name"}
    }

    jwtdecode {
        match => "token"
        "extract_fields" => {"name" => "name"}
    }
}
-----

// Format anchors and links to support generated ids for versioning
// Sample anchor: [id="plugins-{type}s-{plugin}-setting_name"]
// Sample link: <<plugins-{type}s-{plugin}-setting_name>>

[id="plugins-{type}s-{plugin}-options"]
==== Example Filter Configuration Options

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-match>> |<<string,string>>|Yes
| <<plugins-{type}s-{plugin}-extract_fields>> |<<hash,hash>>|Yes
| <<plugins-{type}s-{plugin}-key>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-signature_alg>> |<<string,string>>|No
|=======================================================================

[id="plugins-{type}s-{plugin}-match"]
===== `match` 

  * Value type is <<string,string>>
  * Default value is `nil`

A string that defines the mapping of _where to look_ of the JWT token. 

For Example, the following configuration will make the plugin understand that JWT token to decode for resides in key denoted by `token` in the event
[source,ruby]
    filter {
      jwtdecode {
        match => "token"
      }
    }

[id="plugins-{type}s-{plugin}-extract_fields"]
===== `extract_fields` 

  * Value type is <<hash,hash>>
  * Default value is `nil`

Defines a hash containing the key_name of the required field which needs to be added to the event from the token against the key_name of the field in the decoded token to look out for as a value.

For example, the following configuration will allow the plugin to understand that, extract the value from the decode token against the key name `user.id` and add it to the event with key name `user_id`
[source,ruby]
    filter {
      jwtdecode {
        "extract_fields" => {"user_id" => "user.id"}
      }
    }

[id="plugins-{type}s-{plugin}-key"]
===== `key` 

  * Value type is <<string,string>>
  * Default value is `nil`

Defines the Key with which the signature of the JWT token has to be verfied with. If this configuration is nil or not declared, signature validation of JWT token will be skipped

[id="plugins-{type}s-{plugin}-signature_alg"]
===== `signature_alg` 

  * Value type is <<string,string>>
  * Default value is `HS256`

Defines the signature algorithm of signed JWT token.

// The full list of Value Types is here: 
// https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html

[id="plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]
